name: Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write
  deployments: write


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

      # Validar artefato
      - name: Validate build artifact
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          test -f dist/index.html || (echo "ERRO: dist/index.html não encontrado"; exit 1)
          echo "OK: dist/index.html encontrado"

      # Criar deployment apenas para push na main (não PR)
      - name: Create GitHub Deployment (production)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: create_deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const res = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              description: 'Deploying to production via GitHub Pages',
              auto_merge: false,
              required_contexts: []
            });
            core.setOutput('deployment_id', String(res.data.id));

      # Marcar deployment como in_progress
      - name: Set Deployment status (in_progress)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'in_progress',
              description: 'Deployment started',
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      # Publicar Pages via workflow oficial (NÃO usa branch gh-pages)
      - name: Upload Pages artifact
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/deploy-pages@v4

      # Marcar deployment como sucesso
      - name: Set Deployment Status - Success
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'success',
              description: 'Deployment completed successfully',
              environment_url: 'https://renanmorais.github.io/check-deployment',
              auto_inactive: true,
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      # Marcar deployment como falha
      - name: Set Deployment Status - Failure
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'failure',
              description: 'Deployment failed',
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
